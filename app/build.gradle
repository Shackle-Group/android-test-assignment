plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
}

def getConfigurationProperty = { configuration ->
    def configurationPropertyValue = ""
    File configurationPropsFile = file('config.properties')
    Properties configurationProps = new Properties()
    try {
        if (configurationPropsFile.exists() && configurationPropsFile.canRead()) {
            configurationProps.load(new FileInputStream(configurationPropsFile))
            configurationPropertyValue = configurationProps[configuration].toString()
        }
    } catch (e) {
        logger.debug(e.getLocalizedMessage())
    }
    return configurationPropertyValue
}

android {
    namespace 'com.example.shacklehotelbuddy'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.shacklehotelbuddy"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "BASE_URL", getConfigurationProperty("BASE_URL")
        buildConfigField "String", "RAPID_HEADER_HOST", getConfigurationProperty("RAPID_HEADER_HOST")
        buildConfigField "String", "RAPID_HEADER_API_KEY", getConfigurationProperty("RAPID_HEADER_API_KEY")

        vectorDrawables {
            useSupportLibrary true
        }

        //room database schema
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/dbschemas".toString()]
            }
        }

        // instrumentation tests
        testInstrumentationRunner "com.example.shacklehotelbuddy.CustomTestRunner"
        testBuildType "instrumentalTests"
    }

    buildTypes {
        instrumentalTests {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug // added for only testing purposes
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        buildConfig = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/*.kotlin_module'
    }
    // common test code to avoid duplicating common files
    sourceSets {
        test {
            java.srcDirs += "src/mainTest/java"
        }
        androidTest {
            java.srcDirs += "src/mainTest/java"
        }
    }
}

dependencies {
    // Compose
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.navigation:navigation-compose:2.6.0'
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    implementation 'androidx.navigation:navigation-testing:2.6.0'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

    // Hilt
    def hilt_version = "2.44"
    implementation("com.google.dagger:hilt-android:$hilt_version")
    kapt("com.google.dagger:hilt-android-compiler:$hilt_version")

    // Room
    implementation 'androidx.room:room-ktx:2.5.2'
    kapt 'androidx.room:room-compiler:2.5.2'

    // Async Image
    implementation("io.coil-kt:coil-compose:2.4.0")

    // Logging
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Networking
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.okhttp3:okhttp:4.9.3"
    implementation "com.squareup.okhttp3:logging-interceptor:4.7.2"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation 'com.google.code.gson:gson:2.9.0'

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1"
    testImplementation "org.robolectric:robolectric:4.10.3"
    testImplementation "io.mockk:mockk:1.13.2"
    androidTestImplementation "io.mockk:mockk-android:1.13.2"
    testImplementation 'com.squareup.okhttp3:mockwebserver:5.0.0-alpha.11'
    testImplementation("com.google.dagger:hilt-android-testing:$hilt_version")
    kaptTest("com.google.dagger:hilt-android-compiler:$hilt_version")
    androidTestImplementation("com.google.dagger:hilt-android-testing:$hilt_version")
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:$hilt_version")
}